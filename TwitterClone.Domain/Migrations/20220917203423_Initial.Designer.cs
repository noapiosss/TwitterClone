// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwitterClone.Domain.Database;

#nullable disable

namespace TwitterClone.Domain.Migrations
{
    [DbContext(typeof(TwitterCloneDbContext))]
    [Migration("20220917203423_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TwitterClone.Contracts.Database.Following", b =>
                {
                    b.Property<string>("FollowByUsername")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("follow_by");

                    b.Property<string>("FollowForUsername")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("follow_for");

                    b.HasKey("FollowByUsername", "FollowForUsername");

                    b.HasIndex("FollowForUsername");

                    b.ToTable("tbl_followings", "public");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Like", b =>
                {
                    b.Property<int>("LikedPostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<string>("LikedByUsername")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("liked_by");

                    b.HasKey("LikedPostId", "LikedByUsername");

                    b.HasIndex("LikedByUsername");

                    b.ToTable("tbl_likes", "public");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<string>("AuthorUsername")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("author");

                    b.Property<int?>("CommentTo")
                        .HasColumnType("integer")
                        .HasColumnName("comment_to");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("message");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("post_date");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorUsername");

                    b.ToTable("tbl_posts", "public");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.HasKey("Username");

                    b.ToTable("tbl_users", "public");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Following", b =>
                {
                    b.HasOne("TwitterClone.Contracts.Database.User", "FollowByUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowByUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterClone.Contracts.Database.User", "FollowForUser")
                        .WithMany("Followings")
                        .HasForeignKey("FollowForUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowByUser");

                    b.Navigation("FollowForUser");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Like", b =>
                {
                    b.HasOne("TwitterClone.Contracts.Database.User", "LikedBy")
                        .WithMany("Likes")
                        .HasForeignKey("LikedByUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterClone.Contracts.Database.Post", "LikedPost")
                        .WithMany("Likes")
                        .HasForeignKey("LikedPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedBy");

                    b.Navigation("LikedPost");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Post", b =>
                {
                    b.HasOne("TwitterClone.Contracts.Database.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorUsername");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.Post", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("TwitterClone.Contracts.Database.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
